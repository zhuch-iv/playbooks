---
- name: Test playbook
  hosts: test
  gather_facts: false
  become: true
  become_method: sudo
  vars_files:
    - group_vars/vault_vars.yml
  vars:
    ansible_become_pass: "{{ root_pass }}"
    ansible_port: 2517
    domain: sonar.zhu4.net
    email: zhu4.ivan@pm.me

    db_user: sonar
    db_password: "{{ sonar_pass }}"
    db_name: sonarqube
  tasks:
    - name: ping
      ping: ~

### Install postgres
    - name: Install Postgres
      apt: 
        pkg: "{{ item }}"
        state: latest
        update_cache: yes
      with_items:
        - postgresql
        - postgresql-contrib

    - name: Install Python packages
      pip: 
        name: "{{ item }}"  
        state: present
      with_items:
        - psycopg2-binary

    - name: "Find out if PostgreSQL is initialized"
      ansible.builtin.stat:
        path: "/var/lib/pgsql/data/pg_hba.conf"
      register: postgres_data

    - name: "Initialize PostgreSQL"
      shell: "/usr/lib/postgresql/12/bin/initdb -E UTF8 -D /var/lib/pgsql/data"
      when: not postgres_data.stat.exists 
      become: yes
      become_user: postgres

    - name: "Start and enable services"
      service: 
        name: "{{ item }}" 
        state: started 
        enabled: yes
      with_items:
        - postgresql

    - name: "Create app database"
      postgresql_db:
        state: present
        name: "{{ db_name }}"
      become: yes
      become_user: postgres

    - name: "Create db user"
      postgresql_user:
        state: present
        name: "{{ db_user }}"
        password: "{{ db_password }}"
      become: yes
      become_user: postgres

    - name: "Grant db user access to app db"
      postgresql_privs:
        type: database
        database: "{{ db_name }}"
        roles: "{{ db_user }}"
        grant_option: no
        privs: all
      become: yes
      become_user: postgres

    - name: "Allow md5 connection for the db user"
      postgresql_pg_hba:
        dest: "~/data/pg_hba.conf"
        contype: host
        databases: all
        method: md5
        users: "{{ db_user }}"
        create: true
      become: yes
      become_user: postgres
      notify: restart postgres

  handlers:
    - name: restart postgres
      service: name=postgresql state=restarted
